1.
You have a new requirement to implement for your application: its logic should stay exactly the same but
it will need to have a different user interface (e.g. if you wrote a web app, a different UI may be a REPL).
Please describe how you would go about implementing this new UI in your application?
Would you need to restructure your solution in any way?


- For this code test I have built a REPL application, a different UI may be a web application. I would use a well-tested
framework such as Angular or React to build out the web application with logic specific to web UI such as HTML and CSS.
The web app can potentially live in the same repo as this application for a simple program such as this code test.
The REPL and web app will have different entry points though, and Webpack can be set up to create multiple bundles with
different entry points.

Next, it is best to decouple UI and business logic, and by doing that we will able to reuse business logic
across different UI implementations. This will remove the need to duplicate logic and reduce cost of code maintenance.
In this code test I have created a NumberCollections object class to keep track of numbers entered by user. If I am to
build another UI implementation such as a web app, I would further extract common business logic such as timer
and fibonacci numbers generator, and use a wrapper class to encapsulate their states and methods. I can then inject these
core business objects into the REPL and web app through their entry points, allowing them to utilise the shared business
logic encapsulated in these objects. Another benefit by doing that is that we can then easily write tests for the two
different UI and just once for the business logic layer.

For more complex application, I would suggest creating different repos for different UI implementations to achieve
greater separation of concern. An advance technique to share core business logic is to create modules and npm packages
out of them. These packages can then be included in those UI repos as neeeded.


2.
You now need to make your application "production ready", and deploy it so that it can be used by customers.
Please describe the steps you'd need to take for this to happen.


- For this application, I have included Webpack and the command to bundle all source files into a single executable
file which excludes test files and Typescript compiler. Once this is done, the file can then be hosted on a CDN to be
downloaded by customers. The file can also be potentially distributed via other means such as email or USB flash drive.

If this is a web application, we will use the same approach - utilising Webpack to bundle source files into a HTML, CSS
and JS file. One of the easiest ways to host these files is by using Amazon S3 bucket, which has an option to host
static web application. For more advanced scalable solution, we could utilise Docker to containerize the application
and use a service such as Amazon ECS to run and manage these containers.


3.
What did you think about this coding test - is there anything you'd suggest in order to improve it?


- This coding test is actually quite challenging, especially dealing with the asynchronouse nature of Javascript, with
timer intervals and readline interface being the core feature of the application. Just a couple of comments regarding
the coding test:

  i. The test didn't specify what would happen if user enters an input that is undesirable, for example entering letters
  when the program asks for a number. I addressed this by adding validations regarding user inputs, and handle incorrect
  inputs gracefully instead of failing immediately. The program achieves this by repeating the question and giving out
  hints of what inputs the program will accept.

  ii. The Fibonacci numbers feature is one of the most challenging parts of the test, because the maximum safe normal integer
  that can be used is 9007199254740991, as JS's numbers are stored as floating-point in a 52-bit mantissa. This number is only
  around the 78th number in the Fibonacci sequence. Any numbers higher than that will lose precision and thus cannot be correctly
  computed whether the number is one of the first 1000th Fibonacci numbers. To solve this, we have to use Javascript BigInt
  type instead. The BigInt type can store extremely large integers, with one disadvantage being that BigInt numbers cannot
  be used to perform math operations on the Math class. Therefore to solve this feature, I decided to generate and store the
  first 1000th Fibonacci numbers as BigInt numbers when the program starts, and when user inputs a number, convert that number
  into a BigInt and check against the pre-generated list.
